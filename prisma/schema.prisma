// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          Role      @default(MEMBER)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Booking       Booking[]

  @@unique([email])
  @@map("user")
}

model HotelInfo {
  id          String   @id @default(cuid())
  name        String
  description String
  address     String
  city        String
  country     String
  phoneNumber String?
  email       String?
  website     String?
  updatedAt   DateTime @updatedAt
}

model RoomType {
  id          String    @id @default(cuid())
  name        String
  description String
  basePrice   Float
  capacity    Int
  amenities   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rooms       Room[]
  Booking     Booking[]
}

model Room {
  id         String     @id @default(cuid())
  roomNumber String     @unique
  roomTypeId String
  roomType   RoomType   @relation(fields: [roomTypeId], references: [id])
  status     RoomStatus @default(AVAILABLE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  bookings   Booking[]
}

model Booking {
  id         String        @id @default(cuid())
  name       String
  email      String?
  phone      String
  roomTypeId String
  roomType   RoomType      @relation(fields: [roomTypeId], references: [id])
  userId     String?
  user       User?         @relation(fields: [userId], references: [id])
  roomId     String?
  room       Room?         @relation(fields: [roomId], references: [id])
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Float
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Amenity {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  STAFF
  MEMBER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
